create database feedback_app_prod ;
use feedback_app_prod ;

SET FOREIGN_KEY_CHECKS = 0 ;

drop table CLASS_DETAILS ;
drop table SUBJECT_DETAILS ;
drop table STUDENT_DETAILS ;
drop table TEACHER_DETAILS ;
drop table SUBJECT_TEACHER_MAPPING ;
drop table QUESTION_STRUCTURE_MASTER ;
drop table QUESTION_MASTER ;
drop table EVALUATION_FACTORS_DETAILS ;
drop table CORE_FEEDBACK_DETAILS ;
drop table TEACHERS_FEEDBACK_DETAILS ;
drop table FACILITIES_FEEDBACK_DETAILS ;
drop table GENERAL_FEEDBACK_DETAILS ;
drop table SQL_QUERY_MASTER

SET FOREIGN_KEY_CHECKS = 1 ;

CREATE TABLE CLASS_DETAILS (
	CLASS_ID INT PRIMARY KEY ,
	CLASS_NAME VARCHAR(16) ,
	IS_ACTIVE INT(1)
); 

CREATE TABLE SUBJECT_DETAILS (
	SUBJECT_ID INT PRIMARY KEY,
	CLASS_ID INT ,
	SUBJECT_NAME VARCHAR(30) ,
	IS_ACTIVE INT(1) ,
	FOREIGN KEY (CLASS_ID) REFERENCES CLASS_DETAILS (CLASS_ID) ON DELETE CASCADE
);

CREATE TABLE STUDENT_DETAILS (
	STUDENT_ID INT PRIMARY KEY ,
	CLASS_ID INT ,
	STUDENT_NAME VARCHAR(20) ,
	GENDER VARCHAR(6) ,
	DOB DATE ,
	ADDRESS VARCHAR(100) ,
	CONTACT VARCHAR(12) ,
	IS_ACTIVE INT(1) ,
	FOREIGN KEY (CLASS_ID) REFERENCES CLASS_DETAILS(CLASS_ID) ON DELETE CASCADE
);

CREATE TABLE TEACHER_DETAILS (
	TEACHER_ID INT PRIMARY KEY ,
	TEACHER_NAME VARCHAR(30) ,
	GENDER VARCHAR(6) ,
	DOB DATE ,
	ADDRESS VARCHAR(100) ,
	CONTACT VARCHAR(12) ,
	IS_ACTIVE INT(1)
);

CREATE TABLE SUBJECT_TEACHER_MAPPING (
	MAPPING_ID INT PRIMARY KEY ,
	SUBJECT_ID INT ,
	TEACHER_ID INT ,
	START_DATE DATE ,
	END_DATE DATE ,
	FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECT_DETAILS(SUBJECT_ID)  ON DELETE CASCADE,
	FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER_DETAILS(TEACHER_ID)  ON DELETE CASCADE
);

CREATE TABLE QUESTION_STRUCTURE_MASTER (
	STRUCT_ID INT PRIMARY KEY ,
	SECTION_NAME VARCHAR(30),
	IS_ACTIVE INT(1) 
);

CREATE TABLE QUESTION_MASTER (
	QUESTION_ID INT PRIMARY KEY ,
	STRUCT_ID INT  ,
	QUESTION VARCHAR(100) ,
	IS_ACTIVE INT(1) ,
	FOREIGN KEY (STRUCT_ID) REFERENCES QUESTION_STRUCTURE_MASTER ( STRUCT_ID) ON DELETE CASCADE
);

CREATE TABLE EVALUATION_FACTORS_DETAILS (
   FACTOR_ID INT PRIMARY KEY ,
   FACTOR VARCHAR(100) ,
   IS_ACTIVE INT(1) 
   
);

CREATE TABLE CORE_FEEDBACK_DETAILS (
	CORE_FEEDBACK_ID INT PRIMARY KEY ,
	STUDENT_ID INT ,
	FEEDBACK_TYPE VARCHAR(10) ,
	SUBMITTED_DATE DATE ,
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT_DETAILS ( STUDENT_ID) ON DELETE CASCADE
);

CREATE TABLE TEACHERS_FEEDBACK_DETAILS (
	TEACHERS_FEEDBACK_ID INT PRIMARY KEY ,
	CORE_FEEDBACK_ID INT ,
	FACTOR_ID INT ,
	TEACHER_ID INT ,
	FEEDBACK INT ,
	FOREIGN KEY (CORE_FEEDBACK_ID) REFERENCES CORE_FEEDBACK_DETAILS ( CORE_FEEDBACK_ID) ON DELETE CASCADE ,
	FOREIGN KEY (FACTOR_ID) REFERENCES EVALUATION_FACTORS_DETAILS (FACTOR_ID) ON DELETE CASCADE ,
	FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER_DETAILS (TEACHER_ID) ON DELETE CASCADE 
);

CREATE TABLE FACILITIES_FEEDBACK_DETAILS (
	FACILITIES_FEEDBACK_ID INT PRIMARY KEY ,
	CORE_FEEDBACK_ID INT ,
	QUESTION_ID INT ,
	FEEDBACK INT ,
	FOREIGN KEY (CORE_FEEDBACK_ID) REFERENCES CORE_FEEDBACK_DETAILS (CORE_FEEDBACK_ID) ON DELETE CASCADE ,
	FOREIGN KEY (QUESTION_ID) REFERENCES QUESTION_MASTER ( QUESTION_ID) ON DELETE CASCADE
);

CREATE TABLE GENERAL_FEEDBACK_DETAILS(
 GENERAL_FEEDBACK_ID INT PRIMARY KEY ,
 CORE_FEEDBACK_ID INT ,
 FEEDBACK INT ,
 FOREIGN KEY (CORE_FEEDBACK_ID) REFERENCES CORE_FEEDBACK_DETAILS ( CORE_FEEDBACK_ID ) ON DELETE CASCADE
);

CREATE TABLE SQL_QUERY_MASTER(
	QUERY_ID INT PRIMARY KEY AUTO_INCREMENT,
	QUERY_NAME VARCHAR(100) ,
	QUERY VARCHAR(1000) ,
	IS_ACTIVE INT(1)
);

INSERT INTO SQL_QUERY_MASTER(QUERY_NAME , QUERY) VALUES('INSERT_CLASS','insert into class_details values(?,?,?)'); 
INSERT INTO SQL_QUERY_MASTER(QUERY_NAME , QUERY) VALUES('GET_CLASS','select * from class_details where class_id = ?'); 
INSERT INTO SQL_QUERY_MASTER(QUERY_NAME , QUERY) VALUES('GET_ALL_CLASSES','select * from class_details'); 
INSERT INTO SQL_QUERY_MASTER(QUERY_NAME , QUERY) VALUES('INSERT_QUESTION_STRUCTURE','insert into question_structure_master values(?,?,?)');
INSERT INTO SQL_QUERY_MASTER(QUERY_NAME , QUERY) VALUES('INSERT_QUESTION','insert into question_master values(?,?,?,?)');
INSERT INTO SQL_QUERY_MASTER(QUERY_NAME,QUERY) VALUES('GET_SECTION_SCHEMA','
select qsm.struct_id , qsm.section_name , concat(\'{\',group_concat(qm.question separator \',\'),\'}\') as questions from question_master qm join
question_structure_master qsm on qm.struct_id = qsm.struct_id
group by qm.struct_id
');

--delete from sql_query_master where query_name = 'INSERT_QUESTION';
  
SELECT * FROM 
 CLASS_DETAILS ,
 SUBJECT_DETAILS ,
 STUDENT_DETAILS ,
 TEACHER_DETAILS ,
 SUBJECT_TEACHER_MAPPING ,
 QUESTION_STRUCTURE_MASTER ,
 QUESTION_MASTER ,
 EVALUATION_FACTORS_DETAILS ,
 CORE_FEEDBACK_DETAILS ,
 TEACHERS_FEEDBACK_DETAILS ,
 FACILITIES_FEEDBACK_DETAILS ,
 GENERAL_FEEDBACK_DETAILS ;
 
insert into question_structure_master values(1,'LIBRARY',1);
insert into question_structure_master values(2,'LABORATORY',1);
insert into question_structure_master values(3,'OFFICE',1);

select * from question_master;
select * from SQL_QUERY_MASTER;
select * from question_structure_master;
select * from 

select qsm.struct_id , qsm.section_name , concat('{',group_concat(qm.question separator ','),'}') as questions from question_master qm join
question_structure_master qsm on qm.struct_id = qsm.struct_id
group by qm.struct_id;


WITH RECURSIVE SectionTree(sectionId,name,question,questions,n) AS 
(
	SELECT 
	qsm.STRUCT_ID AS sectionId ,
	qsm.SECTION_NAME AS name ,
	qm.question as question ,
	'{' AS questions ,
	0 AS n
	FROM QUESTION_STRUCTURE_MASTER qsm
	JOIN QUESTION_MASTER qm ON ( qsm.STRUCT_ID = qm.STRUCT_ID )
	UNION ALL
	SELECT
	st.sectionId ,
	st.name ,
	st.question,
	SUBSTRING(concat(st.questions,','), 45) ,
	st.n+1
	FROM SectionTree st 
	JOIN QUESTION_MASTER qm ON ( st.sectionId = qm.STRUCT_ID )
	where st.n < 2
)
SELECT * FROM SectionTree;

CONCAT(st.questions,',')
CONCAT(first_name, " ", last_name)